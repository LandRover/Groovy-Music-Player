/**
 * Special concat/build task to handle various gPlayer build requirements
 * Concats AMD modules, removes their definitions,
 * and includes/excludes specified modules
 */
module.exports = function(grunt) {
    "use strict";

    var fs = require("fs"),
        requirejs = require("requirejs"),
        srcFolder = __dirname + "/../../src/javascript/",
        rdefineEnd = /\}\);[^}\w]*$/,
        
        config = {
            baseUrl: "src/javascript",
            name: "gplayer",
            out: "dist/gplayer.js",
            
            // We have multiple minify steps
            optimize: "none",
            
            // Include dependencies loaded with require
            findNestedDependencies: true,
            
            // Avoid inserting define() placeholder
            skipModuleInsertion: true,
            
            // Avoid breaking semicolons inserted by r.js
            skipSemiColonInsertion: true,
            
            wrap: {
                startFile: "src/javascript/wrap/intro.js",
                
                endFile: [
                    "src/javascript/exports/global.js",
                    "src/javascript/wrap/outro.js"
                ]
            },
            
            rawText: {},
            
            onBuildWrite: convert
        };

    /**
     * Strip all definitions generated by requirejs
     * Convert "var" modules to var declarations
     * "var module" means the module only contains a return
     * statement that should be converted to a var declaration
     * This is indicated by including the file in any "var" folder
     * @param {String} name
     * @param {String} path
     * @param {String} contents The contents to be written (including their AMD wrappers)
     */
    function convert(name, path, contents) {
        var amdName;

    console.log(path);

        contents = contents
            .replace(/\s*return\s+[^\}]+(\}\);[^\w\}]*)$/, "$1")
            // Multiple exports
            .replace(/\s*exports\.\w+\s*=\s*\w+;/g, "")
            // Remove define wrappers, closure ends, and empty declarations
            .replace(/define\([^{]*?{/, "")
            .replace(rdefineEnd, "")
            // Remove anything wrapped with
            // /* ExcludeStart */ /* ExcludeEnd */
            // or a single line directly after a // BuildExclude comment
            .replace(/\/\*\s*ExcludeStart\s*\*\/[\w\W]*?\/\*\s*ExcludeEnd\s*\*\//ig, "")
            .replace(/\/\/\s*BuildExclude\n\r?[\w\W]*?\n\r?/ig, "")
            // Remove empty definitions
            .replace(/define\(\[[^\]]*\]\)[\W\n]+$/, "");
        
        // AMD Name
        if ((amdName = grunt.option("amd")) != null && /^exports\/amd$/.test(name)) {
            if (amdName) {
                grunt.log.writeln("Naming gPlayer with AMD name: " + amdName);
            } else {
                grunt.log.writeln("AMD name now anonymous");
            }
            
            // Remove the comma for anonymous defines
            contents = contents
                .replace(/(\s*)"gplayer"(\,\s*)/, amdName ? "$1\"" + amdName + "\"$2" : "");
        }
        
        return contents;
    }

    grunt.registerMultiTask(
        "build",
        "Concatenate source, remove sub AMD definitions, " +
            "(include/exclude modules with +/- flags), embed date/version",
    function() {
        var 
            done = this.async(),
            name = this.data.dest,
            version = grunt.config("pkg.version");
            
        /**
         * Handle Final output from the optimizer
         * @param {String} compiled
         */
        config.out = function(compiled) {
            compiled = compiled
                // Embed Version
                .replace(/@VERSION/g, version)
                
                // Embed Date
                // yyyy-mm-ddThh:mmZ
                .replace(/@DATE/g, (new Date()).toISOString().replace(/:\d+\.\d+Z$/, 'Z'));
            
            // Write concatenated source to file
            grunt.file.write(name, compiled);
        };

        // Trace dependencies and concatenate files
        requirejs.optimize(config, function(response) {
            grunt.verbose.writeln(response);
            grunt.log.ok("File '" + name + "' created.");
            done();
        }, function(err) {
            done(err);
        });
    });
};